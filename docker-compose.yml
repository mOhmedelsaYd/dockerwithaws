version: '3'
services: 
  node-app: 
    container_name: express-app-container_name    
    ports: 
      - "4000:6000"
    env_file:
      - ./.env
    # depends_on:
    #   - mongo
  # mongo:
  #   image: mongo
  #   restart: always
  #   volumes:
  #     - mongo-db:/data/db
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: example

  postgres:
    image: postgres
    restart: always
    volumes:
      - postgres-db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
  
  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - 8081:8081
  #   depends_on:
  #     - mongo
  #     - redis
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: example
  #     ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
  #     ME_CONFIG_BASICAUTH: false
  redis:
    image: redis
  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
    environment:
      - NGINX_HOST=foobar.com
      - NGINX_PORT=80
    depends_on:
      - node-app
    volumes: 
      - ./nginx/default.config:/etc/nginx/conf.d/default.conf
volumes: 
    mongo-db:
    postgres-db:

## the volumes is anyomous volume that will be created by docker-compose
## to  persist the data in the mongo container and it will be stored in the docker host (async the data in hard disk)

## you can use enviroment variables in the docker-compose file such as: 
    ## environment:
    ## - NODE_ENV=development ###
    
    